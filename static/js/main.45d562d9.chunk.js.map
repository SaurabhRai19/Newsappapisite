{"version":3,"sources":["components/Newspage.js","components/Searchbox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Newspage","title","description","url","publishedAt","content","image","useState","modalIsOpen","setModalIsOpen","className","style","fontFamily","href","id","onClick","isOpen","shouldCloseOnOverlayClick","onRequestClose","overlay","backgroundColor","color","lineHeight","src","width","height","alt","overflow","SearchBox","searchfield","searchChange","type","placeholder","aria-describedby","onChange","App","searchfd","setSearchfd","newsarr","setNewarr","setisOpen","getNews","a","fetch","response","json","data","articles","useEffect","filterednews","filter","filtering","toLowerCase","includes","event","target","value","size","e","class","for","map","newas","key","urlToImage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45d562d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from \"react-modal\";\r\nimport './Newspage.css';\r\nimport '../index.css';\r\n//import image1 from '../images/cloris-ying-qgilLzDv0w0-unsplash.jpg';\r\n\r\nconst Newspage = ({ title, description, url, publishedAt, content, image }) => {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    return (\r\n        <div>\r\n            <div className=\"newspage-divtag\">\r\n                <h1 style={{ fontFamily : 'Lobster Two' }}>{title}</h1>\r\n                <h2 className=\"descrip\">{description}</h2>\r\n                <main>\r\n                    <span><a href={url}>Visit the page for knowing more</a></span>\r\n                </main>\r\n                <h6>{publishedAt}</h6>\r\n                <p>{content}</p>\r\n                <button id=\"detailsbutton\" onClick={() => setModalIsOpen(true)}> Details </button>\r\n                <Modal isOpen={modalIsOpen}\r\n                    shouldCloseOnOverlayClick={false}\r\n                    onRequestClose={() => setModalIsOpen(false)}\r\n                    style={{\r\n                        overlay: {\r\n                            backgroundColor: 'transparent'\r\n                        },\r\n                        content: {\r\n                            color: 'black',\r\n                            lineHeight: '0.5em'\r\n                        }\r\n                    }}>\r\n                    <div>\r\n                        <button id=\"modalclosebutton\" onClick={() => setModalIsOpen(false)}>Close</button>\r\n                    </div>\r\n                    <h1 id=\"titlemodal\">{title}</h1>\r\n                    <h2 className=\"descrip\">{description}</h2>\r\n                    <main>\r\n                        <span><a href={url}>Visit the page for knowing more</a></span>\r\n                    </main>\r\n                    <h6>{publishedAt}</h6>\r\n                    <img src={ image } style={{width: \"100%\", height: \"50%\" }} alt=\"Image\" />\r\n                    <p style={{ overflow: \"visible\"}}>{content}</p>\r\n                    <main>\r\n                        <span><a href={url}>Visit the page for knowing more</a></span>\r\n                    </main>\r\n                    \r\n                </Modal>\r\n\r\n            </div>\r\n         \r\n            {/*\r\n                \r\n                   <div className=\"newspage-divtag\">\r\n                <h1>{title2}</h1>\r\n                <h2>{description2}</h2>\r\n                <a href={url2}>Visit the page for knowing moore</a>\r\n                <h6>{publishedAt2}</h6>\r\n                <p>{content2}</p>\r\n                <button onClick={() => setModalIsOpen(true)}>See the whole report</button>\r\n                <Modals modelisOpen={modalIsOpen}\r\n                        title2={title2}\r\n                        description2={description2}\r\n                        url2={url2}\r\n                        publishedAt2={publishedAt2}\r\n                        content2={content2} >\r\n\r\n                </Modals>\r\n            </div>\r\n            \r\n            \r\n            */ }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Newspage;","import React from 'react';\r\nimport './Searchbox.css';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"bg-secondary shadow-sm\">\r\n        <input type=\"search\" \r\n        placeholder=\"SEARCH TODAY'S HEADLINES\"  \r\n        aria-describedby=\"button-addon1\" \r\n        className=\"form-control border-0 bg-secondary\"\r\n        id=\"searchbutton\"\r\n        onChange={searchChange} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { useEffect, useState} from 'react';\nimport Newspage from '../components/Newspage';\nimport './App.css';\nimport '../index.css';\nimport Searchbox from '../components/Searchbox';\nimport { BiNews } from 'react-icons/bi';\nimport { MdEmail } from \"react-icons/md\";\n\nfunction App() {\n\n  const APIKEY = \"355ad7894c714aba88ac735135f85785\";\n\n  const [searchfd, setSearchfd] = useState({\n    searchfield: ''\n  });\n  const [newsarr, setNewarr] = useState([]);\n\n  const [isOpen, setisOpen] = useState(true);\n\n  \n\n  const emailsubscription = () => {\n    return (\n      <div className=\"containerwa\">\n        <div id=\"emailsubs\">\n          <div id=\"emailandclose\">\n            <MdEmail color='red' size='10rem'/>\n            <button id=\"closebutton\" onClick={(e) => setisOpen(false)}>X</button>\n          </div>\n          <h2 id=\"subtoget\">SUBSCRIBE TO GET DAILY UPDATES</h2>\n          <form>\n            \n            <div class=\"form-group\">\n              <label for=\"emaiid\">Email Address</label>\n              <input type=\"email\" class=\"form-control\" id=\"emaiid\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\n              <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n            </div>\n            \n            <button  id=\"Subscribe\" type=\"submit\" class=\"btn btn-primary btn-block\">Subscribe</button>\n          </form>\n          \n        </div>\n      </div>\n    )\n  }\n  \n   const getNews = async () => {\n     const response = await fetch(`http://newsapi.org/v2/top-headlines?country=in&apiKey=${APIKEY}`);\n     const data = await response.json();\n     //setNews(data.articles);\n     setNewarr(data.articles);\n   };\n  useEffect(() => {\n    getNews();\n\n  });\n\n  const onSearchChange = (event) => {\n    setSearchfd({ searchfield: event.target.value })\n  }\n  const { searchfield } = searchfd;\n \n  const filterednews = newsarr.filter(filtering => {\n    return filtering.title.toLowerCase().includes(searchfield.toLowerCase());\n  })\n  return (\n    <div>\n      <div className=\"headiconandtitle\">\n        <BiNews id='newicon' color='grey' />\n        <h1 className=\"headline\">Get Your Daily News Update</h1>\n      </div>\n      {isOpen===true ? null : <Searchbox searchChange={onSearchChange}/> }\n      {isOpen === true\n        ? emailsubscription()\n        : \n        filterednews.map(newas => (\n        <Newspage\n          key={newas.title}\n          title={newas.title}\n          description={newas.description}\n          url={newas.url}\n          publishedAt={newas.publishedAt}\n          content={newas.content}\n          image={newas.urlToImage}\n        />\n      ))};\n      \n      {/* \n        <Newspage\n          key={news.title}\n          title={news.title}\n          description={news.description}\n          url={news.url}\n          publishedAt={news.publishedAt}\n          content={news.content}\n          image={news.image}\n        />\n\n\n\n        const [news, setNews] = useState({\n    title: 'Title',\n    description: 'Description of everything',\n    url: 'https://www.google.com',\n    publishedAt: '2020',\n    content: 'Our main content has to be designed really well',\n    image: 'C:\\Users\\saura\\Downloads\\jennifer-marquez--shIc419kMU-unsplash.jpg'\n  });\n      */}\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}